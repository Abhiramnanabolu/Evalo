generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  name              String?
  image             String?  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tests             Test[]      @relation("CreatorTests")
}

model Test {
  id                  String            @id @default(uuid())
  title               String
  description         String?
  duration            Int
  status              TestStatus        @default(DRAFT)
  startTime           DateTime?
  endTime             DateTime?
  allowBack           Boolean           @default(true)
  questionOrder       QuestionOrder     @default(SEQUENTIAL)
  attemptLimit        Int? 
  retakeCooldown      Int?  
  resultVisibility    ResultVisibility  @default(AFTER_TEST)
  passPercentage      Float?
  hasSections         Boolean           @default(false)  // Flag to indicate if test uses sections
  creator             User              @relation("CreatorTests", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  sections            Section[]         // Sections (if test has sections)
  questions           Question[]        // Direct questions (if test has no sections)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Section {
  id                  String            @id @default(uuid())
  test                Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId              String
  title               String
  description         String?
  duration            Int?              // Optional: section-specific duration in minutes
  order               Int               // Order of section in test
  questions           Question[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([testId])
  @@index([testId, order])
}

model Question {
  id                  String            @id @default(uuid())
  test                Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId              String
  section             Section?          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId           String?           // Nullable: null if question belongs directly to test
  type                QuestionType
  title               String
  description         String?
  imageUrl            String?
  points              Float             @default(1)
  negativePoints      Float?            @default(0)
  order               Int               // Order within section or test
  options             Option[]
  correctAnswer       String?           // For SHORT_ANSWER, TRUE_FALSE, NUMERIC
  explanation         String?           // Optional explanation shown after answering
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([testId])
  @@index([sectionId])
  @@index([testId, order])
  @@index([sectionId, order])
}

model Option {
  id                  String            @id @default(uuid())
  question            Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId          String
  text                String
  imageUrl            String?
  isCorrect           Boolean           @default(false)
  order               Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([questionId])
  @@index([questionId, order])
}

enum TestStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum QuestionOrder {
  SEQUENTIAL
  SHUFFLED
}

enum ResultVisibility {
  INSTANT
  AFTER_TEST
  HIDDEN
}

enum QuestionType {
  MCQ_SINGLE
  MCQ_MULTIPLE
  TRUE_FALSE
  SHORT_ANSWER
  NUMERIC
}